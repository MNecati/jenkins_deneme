pipeline {
  agent any
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Build') {
      steps {
        sh './gradlew build'
      }
    }
    stage('Test') {
      steps {
        sh './gradlew test'
      }
    }
    stage('Send email') {
      steps {
        script {
          def subject = "${env.JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result}"
          def body = """<p>Dear ${BUILD_USER},</p>
                       <p>The pipeline for ${env.JOB_NAME} with build number ${BUILD_NUMBER} has completed ${currentBuild.result}.</p>
                       <p>Please find the build log attached to this email.</p>"""
          emailext (
            to: 'mnexatitetik123@gmail.com',
            subject: subject,
            body: body,
            attachmentsPattern: 'build.log',
            contentType: 'text/html'
          )
        }
      }
    }
  }
  
  post {
    always {
      archiveArtifacts artifacts: 'build/libs/*.jar, build/test-results/test/*.xml, build/reports/tests/test/*.html', allowEmptyArchive: true
      stash includes: 'build/**', name: 'build'
      junit 'build/test-results/test/*.xml'
    }
    success {
      sh 'echo "Build succeeded"'
    }
    failure {
      sh 'echo "Build failed"'
      script {
        def subject = "${env.JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result}"
        def body = """<p>Dear ${BUILD_USER},</p>
                     <p>The pipeline for ${env.JOB_NAME} with build number ${BUILD_NUMBER} has completed ${currentBuild.result}.</p>
                     <p>Please find the build log attached to this email.</p>"""
        emailext (
          to: 'mnexatitetik123@gmail.com',
          subject: subject,
          body: body,
          attachmentsPattern: 'build.log',
          contentType: 'text/html'
        )
      }
    }
  }
}
